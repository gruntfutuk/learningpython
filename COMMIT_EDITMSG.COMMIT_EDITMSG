misc updates whilst trying sublime text 3

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/MenuDictionary.py b/MenuDictionary.py
new file mode 100644
index 0000000..e69de29
diff --git a/MenuDictionaryAuto-experiment.py b/MenuDictionaryAuto-experiment.py
new file mode 100644
index 0000000..4303ca9
--- /dev/null
+++ b/MenuDictionaryAuto-experiment.py
@@ -0,0 +1,56 @@
+from collections import OrderedDict
+
+class AutoMenu:
+  def __init__(self):
+    """
+    Menu is built by collecting functions decorated with "_menu_enumerator"
+    """
+    all_attribs = (getattr(self, attr) for attr in dir(self))
+    menu_items = sorted((attr for attr in all_attribs if hasattr(attr, '_menu_idx')),
+                        key=lambda a: a._menu_idx)
+    self._menu_prompts = '\nMake your choice\n' + '\n'.join(
+      '{:2d} - {}'.format(f._menu_idx, f.__name__.replace('_', ' ').title())
+       for f in menu_items)
+    self._menu = OrderedDict((str(m._menu_idx), m) for m in menu_items)
+
+  @staticmethod
+  def _make_menu_item(func, item_no=[0]):
+    """ Method decorator
+        Mark decorated function as menu item by setting attribute
+        _item_idx and use it to set order
+    """
+    item_no[0] += 1
+    setattr(func, '_menu_idx', item_no[0])
+    return func
+
+  _menu_enumerator = _make_menu_item.__func__
+
+  @_menu_enumerator
+  def one(self, *args, **kwargs):
+    print('You chose option 1. Singular choice.')
+
+  @_menu_enumerator
+  def two(self, *args, **kwargs):
+    print('You chose option 2. Two\'s company.')
+
+  @_menu_enumerator
+  def three(self, *args, **kwargs):
+    print('You chose option 3. Three\'s a crowd.')
+
+  @_menu_enumerator
+  def end_game(self, *args, **kwargs):
+    print('You chose option x. Farewell.')
+    return True
+
+  def bad_choice(self):
+    print('Are you sure?')
+
+  def __call__(self):
+    while True:
+      print(self._menu_prompts)
+      choice = input('Your choice? ')
+      end_game = self._menu.get(choice, self.bad_choice)()
+      if end_game:
+          break
+
+AutoMenu()()
\ No newline at end of file
diff --git a/MenuDictionaryAuto-master.py b/MenuDictionaryAuto-master.py
new file mode 100644
index 0000000..e69de29
diff --git a/currency_change.py b/currency_change.py
new file mode 100644
index 0000000..e69de29
